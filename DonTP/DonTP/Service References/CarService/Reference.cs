//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DonTP.CarService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Car", Namespace="http://schemas.datacontract.org/2004/07/DonTP.Data")]
    [System.SerializableAttribute()]
    public partial class Car : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MileageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Make {
            get {
                return this.MakeField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeField, value) != true)) {
                    this.MakeField = value;
                    this.RaisePropertyChanged("Make");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Mileage {
            get {
                return this.MileageField;
            }
            set {
                if ((this.MileageField.Equals(value) != true)) {
                    this.MileageField = value;
                    this.RaisePropertyChanged("Mileage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CarService.ICarServices")]
    public interface ICarServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/addCar", ReplyAction="http://tempuri.org/ICarServices/addCarResponse")]
        void addCar(string Make, string Model, int Year, int Mileage, int Price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/addCar", ReplyAction="http://tempuri.org/ICarServices/addCarResponse")]
        System.Threading.Tasks.Task addCarAsync(string Make, string Model, int Year, int Mileage, int Price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/editCar", ReplyAction="http://tempuri.org/ICarServices/editCarResponse")]
        void editCar(string Make, string Model, int Price, int Id, int Mileage, int Year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/editCar", ReplyAction="http://tempuri.org/ICarServices/editCarResponse")]
        System.Threading.Tasks.Task editCarAsync(string Make, string Model, int Price, int Id, int Mileage, int Year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/deleteCar", ReplyAction="http://tempuri.org/ICarServices/deleteCarResponse")]
        void deleteCar(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/deleteCar", ReplyAction="http://tempuri.org/ICarServices/deleteCarResponse")]
        System.Threading.Tasks.Task deleteCarAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/dropTable", ReplyAction="http://tempuri.org/ICarServices/dropTableResponse")]
        void dropTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/dropTable", ReplyAction="http://tempuri.org/ICarServices/dropTableResponse")]
        System.Threading.Tasks.Task dropTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/createTable", ReplyAction="http://tempuri.org/ICarServices/createTableResponse")]
        void createTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/createTable", ReplyAction="http://tempuri.org/ICarServices/createTableResponse")]
        System.Threading.Tasks.Task createTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/getAllData", ReplyAction="http://tempuri.org/ICarServices/getAllDataResponse")]
        DonTP.CarService.Car[] getAllData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarServices/getAllData", ReplyAction="http://tempuri.org/ICarServices/getAllDataResponse")]
        System.Threading.Tasks.Task<DonTP.CarService.Car[]> getAllDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICarServicesChannel : DonTP.CarService.ICarServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CarServicesClient : System.ServiceModel.ClientBase<DonTP.CarService.ICarServices>, DonTP.CarService.ICarServices {
        
        public CarServicesClient() {
        }
        
        public CarServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CarServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void addCar(string Make, string Model, int Year, int Mileage, int Price) {
            base.Channel.addCar(Make, Model, Year, Mileage, Price);
        }
        
        public System.Threading.Tasks.Task addCarAsync(string Make, string Model, int Year, int Mileage, int Price) {
            return base.Channel.addCarAsync(Make, Model, Year, Mileage, Price);
        }
        
        public void editCar(string Make, string Model, int Price, int Id, int Mileage, int Year) {
            base.Channel.editCar(Make, Model, Price, Id, Mileage, Year);
        }
        
        public System.Threading.Tasks.Task editCarAsync(string Make, string Model, int Price, int Id, int Mileage, int Year) {
            return base.Channel.editCarAsync(Make, Model, Price, Id, Mileage, Year);
        }
        
        public void deleteCar(int id) {
            base.Channel.deleteCar(id);
        }
        
        public System.Threading.Tasks.Task deleteCarAsync(int id) {
            return base.Channel.deleteCarAsync(id);
        }
        
        public void dropTable() {
            base.Channel.dropTable();
        }
        
        public System.Threading.Tasks.Task dropTableAsync() {
            return base.Channel.dropTableAsync();
        }
        
        public void createTable() {
            base.Channel.createTable();
        }
        
        public System.Threading.Tasks.Task createTableAsync() {
            return base.Channel.createTableAsync();
        }
        
        public DonTP.CarService.Car[] getAllData() {
            return base.Channel.getAllData();
        }
        
        public System.Threading.Tasks.Task<DonTP.CarService.Car[]> getAllDataAsync() {
            return base.Channel.getAllDataAsync();
        }
    }
}
